---
namespace: mariadb

mariadb-common:
  defines: runnable
  metadata:
    name: mariadb
    description: |
      MariaDB is a popular open-source relational database management system (RDBMS) that is compatible with MySQL.
      It was initially created as a fork of MySQL in 2009 by the original developers of }/mariadb-conf:/etc/mysql/conf.d
      MariaDB offers many additional features and enhancements over MySQL, including improved performance, scalability, and security.
      It also includes several advanced features such as support for dynamic columns, parallel replication, and built-in support for geographic information system (GIS) data.
    tags: stored procedures, triggers, self hosted, query optimization, mysql alternative, database, replication, clustering
    website: https://mariadb.org/
    source: https://github.com/MariaDB/
    publisher: monk.io
    icon: https://www.vectorlogo.zone/logos/mariadb/mariadb-ar21.png
  services:
    mariadb:
      container: mariadb
      port: 3306
      protocol: tcp
  containers:
    mariadb:
      image: mariadb
      image-tag: <- $mariadb-image
      paths:
        - <- `${monk-volume-path}/mariadb:/var/lib/mysql/`
        - <- `${monk-volume-path}/mariadb-conf:/etc/mysql/conf.d`
      bash: |
        # Start password updater in background
        nohup sh -c '
          # Wait for MariaDB real server to be ready (6 minutes max)
          attempt=0
          auth_errors=0
          
          while [ $attempt -lt 180 ]; do
            # Try connecting with current password first
            if /usr/bin/mariadb -h localhost -P 3306 -u root -p"$MYSQL_ROOT_PASSWORD" -e "SELECT 1;" >/dev/null 2>&1; then
              echo "$(date) MariaDB ready, updating user passwords..."
              /tmp/update-passwords.sh
              exit 0
            fi
            
            # Try without password (fresh install or password not set yet)
            if /usr/bin/mariadb -h localhost -P 3306 -u root -e "SELECT 1;" >/dev/null 2>&1; then
              echo "$(date) MariaDB ready (no password yet), updating user passwords..."
              /tmp/update-passwords.sh
              exit 0
            fi
            
            # Check if it'\''s consistently authentication errors (wrong password)
            auth_result=$(mariadb -h localhost -P 3306 -u root -p"$MYSQL_ROOT_PASSWORD" -e "SELECT 1;" 2>&1)
            if echo "$auth_result" | grep -q "Access denied"; then
              auth_errors=$((auth_errors + 1))
              # If we'\''ve seen auth errors for 60 seconds (30 attempts), likely wrong password
              if [ $auth_errors -ge 30 ]; then
                echo "$(date) ERROR: Persistent authentication failure. Wrong root password."
                echo "$(date) Database password differs from MYSQL_ROOT_PASSWORD environment variable."
                echo "$(date) Solutions:"
                echo "$(date)   1. Reset data: docker-compose down -v && docker-compose up"
                echo "$(date)   2. Update password manually: docker exec -it container mariadb -u root -p"
                echo "$(date)   3. Fix MYSQL_ROOT_PASSWORD in config"
                exit 1
              fi
            else
              # Reset counter if we get different errors (connection issues)
              auth_errors=0
            fi
            
            attempt=$((attempt + 1))
            sleep 2
          done
          echo "$(date) Timeout waiting for MariaDB after 6 minutes"
        ' &
        
        # Run official entrypoint
        exec /usr/local/bin/docker-entrypoint.sh mariadbd
  files:
    password-updater:
      raw: true
      contents: |
        #!/bin/bash
        set -e
        
        # Skip if no user password update needed
        [ -z "$MYSQL_USER" ] || [ -z "$MYSQL_PASSWORD" ] && exit 0
        
        # Update user password (root password is managed by entrypoint)
        /usr/bin/mariadb -h localhost -P 3306 -u root -p"${MYSQL_ROOT_PASSWORD}" <<-EOSQL
          CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'localhost' IDENTIFIED BY '${MYSQL_PASSWORD}';
          CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';
          ALTER USER '${MYSQL_USER}'@'localhost' IDENTIFIED BY '${MYSQL_PASSWORD}';
          ALTER USER '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';
        EOSQL
        
        # Grant database privileges if specified
        if [ -n "$MYSQL_DATABASE" ]; then
          /usr/bin/mariadb -h localhost -P 3306 -u root -p"${MYSQL_ROOT_PASSWORD}" <<-EOSQL
            GRANT ALL ON \`${MYSQL_DATABASE//_/\\_}\`.* TO '${MYSQL_USER}'@'localhost';
            GRANT ALL ON \`${MYSQL_DATABASE//_/\\_}\`.* TO '${MYSQL_USER}'@'%';
            FLUSH PRIVILEGES;
        EOSQL
        fi
        
        echo "$(date) User password update completed!"
      container: mariadb
      path: /tmp/update-passwords.sh
      mode: 0755
  variables:
    mariadb-image:
      value: <- $mariadb-image-tag default("10.10")
      type: string
    mysql-root-password:
      env: MYSQL_ROOT_PASSWORD
      value: <- $mariadb-root-password default("4wfoA7auxY")
      type: string
    mysql-database:
      env: MYSQL_DATABASE
      value: <- $mariadb-database-name default("mariadb")
      type: string
    mysql-user:
      env: MYSQL_USER
      value: <- $mariadb-user-name default("mariadbuser")
      type: string
    mysql-password:
      env: MYSQL_PASSWORD
      value: <- $mariadb-user-password default("Cz9mGzmRtW")
      type: string

mariadb:
  defines: runnable
  inherits: mariadb/mariadb-common
  variables:
    mariadb-image-tag: latest
    mariadb-root-password: 4wfoA7auxY
    mariadb-database-name: mariadb
    mariadb-user-name: mariadbuser
    mariadb-user-password: Cz9mGzmRtW
